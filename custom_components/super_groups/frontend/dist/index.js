/*! For license information please see index.js.LICENSE.txt */
(()=>{"use strict";const t=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,e=Symbol(),i=new Map;class s{constructor(t,i){if(this._$cssResult$=!0,i!==e)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t}get styleSheet(){let e=i.get(this.cssText);return t&&void 0===e&&(i.set(this.cssText,e=new CSSStyleSheet),e.replaceSync(this.cssText)),e}toString(){return this.cssText}}const n=t=>new s("string"==typeof t?t:t+"",e),o=(t,...i)=>{const n=1===t.length?t[0]:i.reduce(((e,i,s)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+t[s+1]),t[0]);return new s(n,e)},r=t?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return n(e)})(t):t;var a;const l=window.trustedTypes,h=l?l.emptyScript:"",d=window.reactiveElementPolyfillSupport,c={toAttribute(t,e){switch(e){case Boolean:t=t?h:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},u=(t,e)=>e!==t&&(e==e||t==t),p={attribute:!0,type:String,converter:c,reflect:!1,hasChanged:u};class _ extends HTMLElement{constructor(){super(),this._$Et=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Ei=null,this.o()}static addInitializer(t){var e;null!==(e=this.l)&&void 0!==e||(this.l=[]),this.l.push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,i)=>{const s=this._$Eh(i,e);void 0!==s&&(this._$Eu.set(s,i),t.push(s))})),t}static createProperty(t,e=p){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const i="symbol"==typeof t?Symbol():"__"+t,s=this.getPropertyDescriptor(t,i,e);void 0!==s&&Object.defineProperty(this.prototype,t,s)}}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(s){const n=this[t];this[e]=s,this.requestUpdate(t,n,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||p}static finalize(){if(this.hasOwnProperty("finalized"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),this.elementProperties=new Map(t.elementProperties),this._$Eu=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const i of e)this.createProperty(i,t[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(r(t))}else void 0!==t&&e.push(r(t));return e}static _$Eh(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}o(){var t;this._$Ep=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Em(),this.requestUpdate(),null===(t=this.constructor.l)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,i;(null!==(e=this._$Eg)&&void 0!==e?e:this._$Eg=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(i=t.hostConnected)||void 0===i||i.call(t))}removeController(t){var e;null===(e=this._$Eg)||void 0===e||e.splice(this._$Eg.indexOf(t)>>>0,1)}_$Em(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Et.set(e,this[e]),delete this[e])}))}createRenderRoot(){var e;const i=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return((e,i)=>{t?e.adoptedStyleSheets=i.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):i.forEach((t=>{const i=document.createElement("style"),s=window.litNonce;void 0!==s&&i.setAttribute("nonce",s),i.textContent=t.cssText,e.appendChild(i)}))})(i,this.constructor.elementStyles),i}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$ES(t,e,i=p){var s,n;const o=this.constructor._$Eh(t,i);if(void 0!==o&&!0===i.reflect){const r=(null!==(n=null===(s=i.converter)||void 0===s?void 0:s.toAttribute)&&void 0!==n?n:c.toAttribute)(e,i.type);this._$Ei=t,null==r?this.removeAttribute(o):this.setAttribute(o,r),this._$Ei=null}}_$AK(t,e){var i,s,n;const o=this.constructor,r=o._$Eu.get(t);if(void 0!==r&&this._$Ei!==r){const t=o.getPropertyOptions(r),a=t.converter,l=null!==(n=null!==(s=null===(i=a)||void 0===i?void 0:i.fromAttribute)&&void 0!==s?s:"function"==typeof a?a:null)&&void 0!==n?n:c.fromAttribute;this._$Ei=r,this[r]=l(e,t.type),this._$Ei=null}}requestUpdate(t,e,i){let s=!0;void 0!==t&&(((i=i||this.constructor.getPropertyOptions(t)).hasChanged||u)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$Ei!==t&&(void 0===this._$E_&&(this._$E_=new Map),this._$E_.set(t,i))):s=!1),!this.isUpdatePending&&s&&(this._$Ep=this._$EC())}async _$EC(){this.isUpdatePending=!0;try{await this._$Ep}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Et&&(this._$Et.forEach(((t,e)=>this[e]=t)),this._$Et=void 0);let e=!1;const i=this._$AL;try{e=this.shouldUpdate(i),e?(this.willUpdate(i),null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(i)):this._$EU()}catch(t){throw e=!1,this._$EU(),t}e&&this._$AE(i)}willUpdate(t){}_$AE(t){var e;null===(e=this._$Eg)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$EU(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$Ep}shouldUpdate(t){return!0}update(t){void 0!==this._$E_&&(this._$E_.forEach(((t,e)=>this._$ES(e,this[e],t))),this._$E_=void 0),this._$EU()}updated(t){}firstUpdated(t){}}var v;_.finalized=!0,_.elementProperties=new Map,_.elementStyles=[],_.shadowRootOptions={mode:"open"},null==d||d({ReactiveElement:_}),(null!==(a=globalThis.reactiveElementVersions)&&void 0!==a?a:globalThis.reactiveElementVersions=[]).push("1.1.1");const $=globalThis.trustedTypes,g=$?$.createPolicy("lit-html",{createHTML:t=>t}):void 0,m=`lit$${(Math.random()+"").slice(9)}$`,f="?"+m,y=`<${f}>`,A=document,b=(t="")=>A.createComment(t),w=t=>null===t||"object"!=typeof t&&"function"!=typeof t,S=Array.isArray,E=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,C=/-->/g,O=/>/g,P=/>|[ 	\n\r](?:([^\s"'>=/]+)([ 	\n\r]*=[ 	\n\r]*(?:[^ 	\n\r"'`<>=]|("|')|))|$)/g,x=/'/g,U=/"/g,T=/^(?:script|style|textarea)$/i,M=t=>(e,...i)=>({_$litType$:t,strings:e,values:i}),H=M(1),N=(M(2),Symbol.for("lit-noChange")),R=Symbol.for("lit-nothing"),k=new WeakMap,j=A.createTreeWalker(A,129,null,!1),L=(t,e)=>{const i=t.length-1,s=[];let n,o=2===e?"<svg>":"",r=E;for(let e=0;e<i;e++){const i=t[e];let a,l,h=-1,d=0;for(;d<i.length&&(r.lastIndex=d,l=r.exec(i),null!==l);)d=r.lastIndex,r===E?"!--"===l[1]?r=C:void 0!==l[1]?r=O:void 0!==l[2]?(T.test(l[2])&&(n=RegExp("</"+l[2],"g")),r=P):void 0!==l[3]&&(r=P):r===P?">"===l[0]?(r=null!=n?n:E,h=-1):void 0===l[1]?h=-2:(h=r.lastIndex-l[2].length,a=l[1],r=void 0===l[3]?P:'"'===l[3]?U:x):r===U||r===x?r=P:r===C||r===O?r=E:(r=P,n=void 0);const c=r===P&&t[e+1].startsWith("/>")?" ":"";o+=r===E?i+y:h>=0?(s.push(a),i.slice(0,h)+"$lit$"+i.slice(h)+m+c):i+m+(-2===h?(s.push(void 0),e):c)}const a=o+(t[i]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return[void 0!==g?g.createHTML(a):a,s]};class z{constructor({strings:t,_$litType$:e},i){let s;this.parts=[];let n=0,o=0;const r=t.length-1,a=this.parts,[l,h]=L(t,e);if(this.el=z.createElement(l,i),j.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(s=j.nextNode())&&a.length<r;){if(1===s.nodeType){if(s.hasAttributes()){const t=[];for(const e of s.getAttributeNames())if(e.endsWith("$lit$")||e.startsWith(m)){const i=h[o++];if(t.push(e),void 0!==i){const t=s.getAttribute(i.toLowerCase()+"$lit$").split(m),e=/([.?@])?(.*)/.exec(i);a.push({type:1,index:n,name:e[2],strings:t,ctor:"."===e[1]?G:"?"===e[1]?K:"@"===e[1]?q:V})}else a.push({type:6,index:n})}for(const e of t)s.removeAttribute(e)}if(T.test(s.tagName)){const t=s.textContent.split(m),e=t.length-1;if(e>0){s.textContent=$?$.emptyScript:"";for(let i=0;i<e;i++)s.append(t[i],b()),j.nextNode(),a.push({type:2,index:++n});s.append(t[e],b())}}}else if(8===s.nodeType)if(s.data===f)a.push({type:2,index:n});else{let t=-1;for(;-1!==(t=s.data.indexOf(m,t+1));)a.push({type:7,index:n}),t+=m.length-1}n++}}static createElement(t,e){const i=A.createElement("template");return i.innerHTML=t,i}}function D(t,e,i=t,s){var n,o,r,a;if(e===N)return e;let l=void 0!==s?null===(n=i._$Cl)||void 0===n?void 0:n[s]:i._$Cu;const h=w(e)?void 0:e._$litDirective$;return(null==l?void 0:l.constructor)!==h&&(null===(o=null==l?void 0:l._$AO)||void 0===o||o.call(l,!1),void 0===h?l=void 0:(l=new h(t),l._$AT(t,i,s)),void 0!==s?(null!==(r=(a=i)._$Cl)&&void 0!==r?r:a._$Cl=[])[s]=l:i._$Cu=l),void 0!==l&&(e=D(t,l._$AS(t,e.values),l,s)),e}class B{constructor(t,e){this.v=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}p(t){var e;const{el:{content:i},parts:s}=this._$AD,n=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:A).importNode(i,!0);j.currentNode=n;let o=j.nextNode(),r=0,a=0,l=s[0];for(;void 0!==l;){if(r===l.index){let e;2===l.type?e=new I(o,o.nextSibling,this,t):1===l.type?e=new l.ctor(o,l.name,l.strings,this,t):6===l.type&&(e=new F(o,this,t)),this.v.push(e),l=s[++a]}r!==(null==l?void 0:l.index)&&(o=j.nextNode(),r++)}return n}m(t){let e=0;for(const i of this.v)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class I{constructor(t,e,i,s){var n;this.type=2,this._$AH=R,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=s,this._$Cg=null===(n=null==s?void 0:s.isConnected)||void 0===n||n}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cg}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===t.nodeType&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=D(this,t,e),w(t)?t===R||null==t||""===t?(this._$AH!==R&&this._$AR(),this._$AH=R):t!==this._$AH&&t!==N&&this.$(t):void 0!==t._$litType$?this.T(t):void 0!==t.nodeType?this.S(t):(t=>{var e;return S(t)||"function"==typeof(null===(e=t)||void 0===e?void 0:e[Symbol.iterator])})(t)?this.A(t):this.$(t)}M(t,e=this._$AB){return this._$AA.parentNode.insertBefore(t,e)}S(t){this._$AH!==t&&(this._$AR(),this._$AH=this.M(t))}$(t){this._$AH!==R&&w(this._$AH)?this._$AA.nextSibling.data=t:this.S(A.createTextNode(t)),this._$AH=t}T(t){var e;const{values:i,_$litType$:s}=t,n="number"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=z.createElement(s.h,this.options)),s);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===n)this._$AH.m(i);else{const t=new B(n,this),e=t.p(this.options);t.m(i),this.S(e),this._$AH=t}}_$AC(t){let e=k.get(t.strings);return void 0===e&&k.set(t.strings,e=new z(t)),e}A(t){S(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let i,s=0;for(const n of t)s===e.length?e.push(i=new I(this.M(b()),this.M(b()),this,this.options)):i=e[s],i._$AI(n),s++;s<e.length&&(this._$AR(i&&i._$AB.nextSibling,s),e.length=s)}_$AR(t=this._$AA.nextSibling,e){var i;for(null===(i=this._$AP)||void 0===i||i.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cg=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class V{constructor(t,e,i,s,n){this.type=1,this._$AH=R,this._$AN=void 0,this.element=t,this.name=e,this._$AM=s,this.options=n,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=R}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,i,s){const n=this.strings;let o=!1;if(void 0===n)t=D(this,t,e,0),o=!w(t)||t!==this._$AH&&t!==N,o&&(this._$AH=t);else{const s=t;let r,a;for(t=n[0],r=0;r<n.length-1;r++)a=D(this,s[i+r],e,r),a===N&&(a=this._$AH[r]),o||(o=!w(a)||a!==this._$AH[r]),a===R?t=R:t!==R&&(t+=(null!=a?a:"")+n[r+1]),this._$AH[r]=a}o&&!s&&this.k(t)}k(t){t===R?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class G extends V{constructor(){super(...arguments),this.type=3}k(t){this.element[this.name]=t===R?void 0:t}}const W=$?$.emptyScript:"";class K extends V{constructor(){super(...arguments),this.type=4}k(t){t&&t!==R?this.element.setAttribute(this.name,W):this.element.removeAttribute(this.name)}}class q extends V{constructor(t,e,i,s,n){super(t,e,i,s,n),this.type=5}_$AI(t,e=this){var i;if((t=null!==(i=D(this,t,e,0))&&void 0!==i?i:R)===N)return;const s=this._$AH,n=t===R&&s!==R||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,o=t!==R&&(s===R||n);n&&this.element.removeEventListener(this.name,this,s),o&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,i;"function"==typeof this._$AH?this._$AH.call(null!==(i=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==i?i:this.element,t):this._$AH.handleEvent(t)}}class F{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){D(this,t)}}const J=window.litHtmlPolyfillSupport;var Z,Q;null==J||J(z,I),(null!==(v=globalThis.litHtmlVersions)&&void 0!==v?v:globalThis.litHtmlVersions=[]).push("2.1.1");class X extends _{constructor(){super(...arguments),this.renderOptions={host:this},this._$Dt=void 0}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Dt=((t,e,i)=>{var s,n;const o=null!==(s=null==i?void 0:i.renderBefore)&&void 0!==s?s:e;let r=o._$litPart$;if(void 0===r){const t=null!==(n=null==i?void 0:i.renderBefore)&&void 0!==n?n:null;o._$litPart$=r=new I(e.insertBefore(b(),t),t,void 0,null!=i?i:{})}return r._$AI(t),r})(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Dt)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Dt)||void 0===t||t.setConnected(!1)}render(){return N}}X.finalized=!0,X._$litElement$=!0,null===(Z=globalThis.litElementHydrateSupport)||void 0===Z||Z.call(globalThis,{LitElement:X});const Y=globalThis.litElementPolyfillSupport;null==Y||Y({LitElement:X}),(null!==(Q=globalThis.litElementVersions)&&void 0!==Q?Q:globalThis.litElementVersions=[]).push("3.1.1");const tt=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(i){i.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(i){i.createProperty(e.key,t)}};function et(t){return(e,i)=>void 0!==i?((t,e,i)=>{e.constructor.createProperty(i,t)})(t,e,i):tt(t,e)}function it(t){return et({...t,state:!0})}const st=t=>e=>"function"==typeof e?((t,e)=>(window.customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:i,elements:s}=e;return{kind:i,elements:s,finisher(e){window.customElements.define(t,e)}}})(t,e);var nt=function(t,e,i,s){var n,o=arguments.length,r=o<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,s);else for(var a=t.length-1;a>=0;a--)(n=t[a])&&(r=(o<3?n(r):o>3?n(e,i,r):n(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r};let ot=class extends X{constructor(){super(...arguments),this.data=void 0,this._data=void 0,this._targetSelector={target:{}},this._domainMap={light:"Light",binary_sensor:"Binary Sensor",switch:"Switch"},this._domainSelector={select:{options:["Light","Binary Sensor","Switch"]}},this._allOnSelector={boolean:{}}}willUpdate(t){t.has("data")&&(this._data=this.data)}_cancel(){this._data=void 0}_close(){this.dispatchEvent(new CustomEvent("save",{detail:Object.assign({},this._data),bubbles:!1})),this._data=void 0}_titleChanged(t){this._data=Object.assign(Object.assign({},this._data),{title:t.detail.value})}_allOnChanged(t){this._data=Object.assign(Object.assign({},this._data),{allOn:t.detail.value})}_onDomainChanged(t){for(const[e,i]of Object.entries(this._domainMap))i==t.detail.value&&(this._data=Object.assign(Object.assign({},this._data),{domain:e}))}_onEntryChanged(t){const e=t.detail.value;this._data=Object.assign(Object.assign({},this._data),{entry:e})}render(){if(!this._data)return H``;const t=!this._data.title.trim();let e=H``,i=this._data.title,s=H``;return this._data.id||(e=H`
                <paper-input
                    .value=${this._data.title}
                    @value-changed=${this._titleChanged}
                    label="Group name"
                    .invalid=${t}
                    .errorMessage="Mandatory field"
                    dialogInitialFocus
                >
                </paper-input>
            `,i="New Super Group",s=H`
                <ha-selector
                    label="Group type"
                    .hass=${this.hass}
                    .selector=${this._domainSelector}
                    .value=${this._domainMap[this._data.domain]}
                    @value-changed=${this._onDomainChanged}
                >
                </ha-selector>    
            `),H`
        <ha-dialog 
            scrimClickAction
            escapeKeyAction
            .heading=${i}
            open
        >
            <div>
                <div class="form">
                    <div>
                        ${e}
                    </div>
                    <div>
                        ${s}
                    </div>
                    <div>
                        <ha-selector
                            label="Turn ON if all grouped entities are ON"
                            .hass=${this.hass}
                            .selector=${this._allOnSelector}
                            .value=${this._data.allOn}
                            @value-changed=${this._allOnChanged}
                            >
                        </ha-selector-target>
                    </div>
                    <div>
                        <ha-selector
                            label="Group entry"
                            .hass=${this.hass}
                            .selector=${this._targetSelector}
                            .value=${this._data.entry}
                            @value-changed=${this._onEntryChanged}
                        >
                        </ha-selector-target>
                    </div>
                </div>
            </div>
            <mwc-button
                @click=${this._close}
                slot="primaryAction"
            >
                Save
            </mwc-button>
            <mwc-button
                @click=${this._cancel}
                slot="secondaryAction"
            >
                Cancel
            </mwc-button>
        </ha-dialog>
        `}static get styles(){return o`
            .bottomRow {
                text-align: center;
            }
            .row {
                display: flex;
                align-items: center;
            }
        `}};nt([et()],ot.prototype,"data",void 0),nt([et()],ot.prototype,"hass",void 0),nt([it()],ot.prototype,"_data",void 0),nt([et()],ot.prototype,"_targetSelector",void 0),nt([et()],ot.prototype,"_domainSelector",void 0),nt([et()],ot.prototype,"_allOnSelector",void 0),ot=nt([st("super-groups-editor")],ot);var rt=function(t,e,i,s){var n,o=arguments.length,r=o<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,s);else for(var a=t.length-1;a>=0;a--)(n=t[a])&&(r=(o<3?n(r):o>3?n(e,i,r):n(e,i))||r);return o>3&&r&&Object.defineProperty(e,i,r),r},at=function(t,e,i,s){return new(i||(i=Promise))((function(n,o){function r(t){try{l(s.next(t))}catch(t){o(t)}}function a(t){try{l(s.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((s=s.apply(t,e||[])).next())}))};const lt=[{path:"/super_groups",name:"Super Groups",icon:"hass:view-dashboard"}];let ht=class extends X{constructor(){super(...arguments),this._items=void 0,this._editorParams=void 0}_columns(t){return{id:{hidden:!0},icon:{title:"",type:"icon",template:t=>t?H` <ha-icon slot="item-icon" .icon=${t}></ha-icon> `:H``},title:{title:"Name",sortable:!0,filterable:!0,direction:"asc",grows:!0,template:t=>H`${t}`},remove:{title:"Remove",filterable:!1,grows:!1,template:(t,e)=>H`
                        <mwc-button
                            @click=${()=>{this._remove(e.id)}}
                        >
                            Remove
                        </mwc-button>
                    `}}}_remove(t){return at(this,void 0,void 0,(function*(){yield this.hass.connection.sendMessagePromise({type:"super_groups/remove_entry",entry_id:t}),this._load()}))}_load(){return at(this,void 0,void 0,(function*(){const t=yield this.hass.connection.sendMessagePromise({type:"super_groups/get_entries"});this._items=t.items}))}_getItems(){return this._items?this._items:(this._load(),[])}_edit(t){const e=this._items.find((e=>e.id==t.detail.id));this._editorParams={id:e.id,title:e.title,allOn:e.all_on,domain:e.domain,entry:e.entry}}_add(){this._editorParams={id:void 0,title:"New Group",allOn:!1,domain:"light",entry:{entity_id:[],device_id:[],area_id:[]}}}_save(t){return at(this,void 0,void 0,(function*(){const e=t.detail,i=e.id?{type:"super_groups/update_entry",entry_id:e.id,all_on:e.allOn,items:e.entry}:{type:"super_groups/add_entry",title:e.title,domain:e.domain,all_on:e.allOn,items:e.entry};yield this.hass.connection.sendMessagePromise(i),this._load()}))}render(){return H`
        <hass-tabs-subpage-data-table
            .hass=${this.hass}
            .narrow=${this.narrow}
            back-path="/config"
            .route=${this.route}
            .tabs=${lt}
            .columns=${this._columns(this.narrow)}
            .data=${this._getItems()}
            @row-click=${this._edit}
            id="id"
            hasFab
            clickable
        >
            <ha-fab
                slot="fab"
                label="Add new group"
                extended
                @click=${this._add}
            >
            </ha-fab>
        </hass-tabs-subpage-data-table>
        <super-groups-editor 
            .data=${this._editorParams}
            .hass=${this.hass}
            @save=${this._save}
        >
        </super-groups-editor>
        `}};rt([et()],ht.prototype,"hass",void 0),rt([et()],ht.prototype,"narrow",void 0),rt([et()],ht.prototype,"route",void 0),rt([et()],ht.prototype,"panel",void 0),rt([it()],ht.prototype,"_items",void 0),rt([it()],ht.prototype,"_editorParams",void 0),ht=rt([st("super-groups-panel")],ht)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZGtDLE1BQU83QixFQUFNQSxhQUVFMVIsS0FBS2lTLEtBQUtpQixXQUFXQyxtQkFBbUJ6SCxHQUUzRDFMLEtBQUtxVCxXQUdUdkUsU0FFSSxPQUFPLENBQUk7O29CQUVDOU8sS0FBS2lTO3NCQUNIalMsS0FBS3lTOztxQkFFTnpTLEtBQUttVTtvQkFDTmpDO3VCQUNHbFMsS0FBS3dTLFNBQVN4UyxLQUFLeVM7b0JBQ3RCelMsS0FBS3dUO3lCQUNBeFQsS0FBS3lUOzs7Ozs7Ozs7eUJBU0x6VCxLQUFLOFQ7Ozs7O29CQUtWOVQsS0FBS3VTO29CQUNMdlMsS0FBS2lTO29CQUNMalMsS0FBS2tVOzs7WUEzSnJCLElBREMsa0NBSUQsSUFEQyxvQ0FJRCxJQURDLG1DQUlELElBREMsbUNBSUQsSUFEQyxvQ0FJRCxJQURDLDJDQWpCUTdCLEdBQWdCLElBRDVCLEdBQWMsdUJBQ0ZBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9jc3MtdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvcmVhY3RpdmUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGl0LWh0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xpdC1lbGVtZW50L2xpdC1lbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvc3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL2N1c3RvbS1lbGVtZW50LmpzIiwid2VicGFjazovLy8uL2VkaXRvci50cyIsIndlYnBhY2s6Ly8vLi9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IHQ9d2luZG93LlNoYWRvd1Jvb3QmJih2b2lkIDA9PT13aW5kb3cuU2hhZHlDU1N8fHdpbmRvdy5TaGFkeUNTUy5uYXRpdmVTaGFkb3cpJiZcImFkb3B0ZWRTdHlsZVNoZWV0c1wiaW4gRG9jdW1lbnQucHJvdG90eXBlJiZcInJlcGxhY2VcImluIENTU1N0eWxlU2hlZXQucHJvdG90eXBlLGU9U3ltYm9sKCksbj1uZXcgTWFwO2NsYXNzIHN7Y29uc3RydWN0b3IodCxuKXtpZih0aGlzLl8kY3NzUmVzdWx0JD0hMCxuIT09ZSl0aHJvdyBFcnJvcihcIkNTU1Jlc3VsdCBpcyBub3QgY29uc3RydWN0YWJsZS4gVXNlIGB1bnNhZmVDU1NgIG9yIGBjc3NgIGluc3RlYWQuXCIpO3RoaXMuY3NzVGV4dD10fWdldCBzdHlsZVNoZWV0KCl7bGV0IGU9bi5nZXQodGhpcy5jc3NUZXh0KTtyZXR1cm4gdCYmdm9pZCAwPT09ZSYmKG4uc2V0KHRoaXMuY3NzVGV4dCxlPW5ldyBDU1NTdHlsZVNoZWV0KSxlLnJlcGxhY2VTeW5jKHRoaXMuY3NzVGV4dCkpLGV9dG9TdHJpbmcoKXtyZXR1cm4gdGhpcy5jc3NUZXh0fX1jb25zdCBvPXQ9Pm5ldyBzKFwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6dCtcIlwiLGUpLHI9KHQsLi4ubik9Pntjb25zdCBvPTE9PT10Lmxlbmd0aD90WzBdOm4ucmVkdWNlKCgoZSxuLHMpPT5lKyh0PT57aWYoITA9PT10Ll8kY3NzUmVzdWx0JClyZXR1cm4gdC5jc3NUZXh0O2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXJldHVybiB0O3Rocm93IEVycm9yKFwiVmFsdWUgcGFzc2VkIHRvICdjc3MnIGZ1bmN0aW9uIG11c3QgYmUgYSAnY3NzJyBmdW5jdGlvbiByZXN1bHQ6IFwiK3QrXCIuIFVzZSAndW5zYWZlQ1NTJyB0byBwYXNzIG5vbi1saXRlcmFsIHZhbHVlcywgYnV0IHRha2UgY2FyZSB0byBlbnN1cmUgcGFnZSBzZWN1cml0eS5cIil9KShuKSt0W3MrMV0pLHRbMF0pO3JldHVybiBuZXcgcyhvLGUpfSxpPShlLG4pPT57dD9lLmFkb3B0ZWRTdHlsZVNoZWV0cz1uLm1hcCgodD0+dCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQ/dDp0LnN0eWxlU2hlZXQpKTpuLmZvckVhY2goKHQ9Pntjb25zdCBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxzPXdpbmRvdy5saXROb25jZTt2b2lkIDAhPT1zJiZuLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIscyksbi50ZXh0Q29udGVudD10LmNzc1RleHQsZS5hcHBlbmRDaGlsZChuKX0pKX0sUz10P3Q9PnQ6dD0+dCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQ/KHQ9PntsZXQgZT1cIlwiO2Zvcihjb25zdCBuIG9mIHQuY3NzUnVsZXMpZSs9bi5jc3NUZXh0O3JldHVybiBvKGUpfSkodCk6dDtleHBvcnR7cyBhcyBDU1NSZXN1bHQsaSBhcyBhZG9wdFN0eWxlcyxyIGFzIGNzcyxTIGFzIGdldENvbXBhdGlibGVTdHlsZSx0IGFzIHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyxvIGFzIHVuc2FmZUNTU307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3MtdGFnLmpzLm1hcFxuIiwiaW1wb3J0e2dldENvbXBhdGlibGVTdHlsZSBhcyB0LGFkb3B0U3R5bGVzIGFzIGl9ZnJvbVwiLi9jc3MtdGFnLmpzXCI7ZXhwb3J0e0NTU1Jlc3VsdCxhZG9wdFN0eWxlcyxjc3MsZ2V0Q29tcGF0aWJsZVN0eWxlLHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyx1bnNhZmVDU1N9ZnJvbVwiLi9jc3MtdGFnLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi92YXIgcztjb25zdCBlPXdpbmRvdy50cnVzdGVkVHlwZXMscj1lP2UuZW1wdHlTY3JpcHQ6XCJcIixoPXdpbmRvdy5yZWFjdGl2ZUVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQsbz17dG9BdHRyaWJ1dGUodCxpKXtzd2l0Y2goaSl7Y2FzZSBCb29sZWFuOnQ9dD9yOm51bGw7YnJlYWs7Y2FzZSBPYmplY3Q6Y2FzZSBBcnJheTp0PW51bGw9PXQ/dDpKU09OLnN0cmluZ2lmeSh0KX1yZXR1cm4gdH0sZnJvbUF0dHJpYnV0ZSh0LGkpe2xldCBzPXQ7c3dpdGNoKGkpe2Nhc2UgQm9vbGVhbjpzPW51bGwhPT10O2JyZWFrO2Nhc2UgTnVtYmVyOnM9bnVsbD09PXQ/bnVsbDpOdW1iZXIodCk7YnJlYWs7Y2FzZSBPYmplY3Q6Y2FzZSBBcnJheTp0cnl7cz1KU09OLnBhcnNlKHQpfWNhdGNoKHQpe3M9bnVsbH19cmV0dXJuIHN9fSxuPSh0LGkpPT5pIT09dCYmKGk9PWl8fHQ9PXQpLGw9e2F0dHJpYnV0ZTohMCx0eXBlOlN0cmluZyxjb252ZXJ0ZXI6byxyZWZsZWN0OiExLGhhc0NoYW5nZWQ6bn07Y2xhc3MgYSBleHRlbmRzIEhUTUxFbGVtZW50e2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLl8kRXQ9bmV3IE1hcCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMSx0aGlzLmhhc1VwZGF0ZWQ9ITEsdGhpcy5fJEVpPW51bGwsdGhpcy5vKCl9c3RhdGljIGFkZEluaXRpYWxpemVyKHQpe3ZhciBpO251bGwhPT0oaT10aGlzLmwpJiZ2b2lkIDAhPT1pfHwodGhpcy5sPVtdKSx0aGlzLmwucHVzaCh0KX1zdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpe3RoaXMuZmluYWxpemUoKTtjb25zdCB0PVtdO3JldHVybiB0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLmZvckVhY2goKChpLHMpPT57Y29uc3QgZT10aGlzLl8kRWgocyxpKTt2b2lkIDAhPT1lJiYodGhpcy5fJEV1LnNldChlLHMpLHQucHVzaChlKSl9KSksdH1zdGF0aWMgY3JlYXRlUHJvcGVydHkodCxpPWwpe2lmKGkuc3RhdGUmJihpLmF0dHJpYnV0ZT0hMSksdGhpcy5maW5hbGl6ZSgpLHRoaXMuZWxlbWVudFByb3BlcnRpZXMuc2V0KHQsaSksIWkubm9BY2Nlc3NvciYmIXRoaXMucHJvdG90eXBlLmhhc093blByb3BlcnR5KHQpKXtjb25zdCBzPVwic3ltYm9sXCI9PXR5cGVvZiB0P1N5bWJvbCgpOlwiX19cIit0LGU9dGhpcy5nZXRQcm9wZXJ0eURlc2NyaXB0b3IodCxzLGkpO3ZvaWQgMCE9PWUmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnByb3RvdHlwZSx0LGUpfX1zdGF0aWMgZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHQsaSxzKXtyZXR1cm57Z2V0KCl7cmV0dXJuIHRoaXNbaV19LHNldChlKXtjb25zdCByPXRoaXNbdF07dGhpc1tpXT1lLHRoaXMucmVxdWVzdFVwZGF0ZSh0LHIscyl9LGNvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwfX1zdGF0aWMgZ2V0UHJvcGVydHlPcHRpb25zKHQpe3JldHVybiB0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLmdldCh0KXx8bH1zdGF0aWMgZmluYWxpemUoKXtpZih0aGlzLmhhc093blByb3BlcnR5KFwiZmluYWxpemVkXCIpKXJldHVybiExO3RoaXMuZmluYWxpemVkPSEwO2NvbnN0IHQ9T2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpO2lmKHQuZmluYWxpemUoKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzPW5ldyBNYXAodC5lbGVtZW50UHJvcGVydGllcyksdGhpcy5fJEV1PW5ldyBNYXAsdGhpcy5oYXNPd25Qcm9wZXJ0eShcInByb3BlcnRpZXNcIikpe2NvbnN0IHQ9dGhpcy5wcm9wZXJ0aWVzLGk9Wy4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpLC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCldO2Zvcihjb25zdCBzIG9mIGkpdGhpcy5jcmVhdGVQcm9wZXJ0eShzLHRbc10pfXJldHVybiB0aGlzLmVsZW1lbnRTdHlsZXM9dGhpcy5maW5hbGl6ZVN0eWxlcyh0aGlzLnN0eWxlcyksITB9c3RhdGljIGZpbmFsaXplU3R5bGVzKGkpe2NvbnN0IHM9W107aWYoQXJyYXkuaXNBcnJheShpKSl7Y29uc3QgZT1uZXcgU2V0KGkuZmxhdCgxLzApLnJldmVyc2UoKSk7Zm9yKGNvbnN0IGkgb2YgZSlzLnVuc2hpZnQodChpKSl9ZWxzZSB2b2lkIDAhPT1pJiZzLnB1c2godChpKSk7cmV0dXJuIHN9c3RhdGljIF8kRWgodCxpKXtjb25zdCBzPWkuYXR0cmlidXRlO3JldHVybiExPT09cz92b2lkIDA6XCJzdHJpbmdcIj09dHlwZW9mIHM/czpcInN0cmluZ1wiPT10eXBlb2YgdD90LnRvTG93ZXJDYXNlKCk6dm9pZCAwfW8oKXt2YXIgdDt0aGlzLl8kRXA9bmV3IFByb21pc2UoKHQ9PnRoaXMuZW5hYmxlVXBkYXRpbmc9dCkpLHRoaXMuXyRBTD1uZXcgTWFwLHRoaXMuXyRFbSgpLHRoaXMucmVxdWVzdFVwZGF0ZSgpLG51bGw9PT0odD10aGlzLmNvbnN0cnVjdG9yLmwpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9PnQodGhpcykpKX1hZGRDb250cm9sbGVyKHQpe3ZhciBpLHM7KG51bGwhPT0oaT10aGlzLl8kRWcpJiZ2b2lkIDAhPT1pP2k6dGhpcy5fJEVnPVtdKS5wdXNoKHQpLHZvaWQgMCE9PXRoaXMucmVuZGVyUm9vdCYmdGhpcy5pc0Nvbm5lY3RlZCYmKG51bGw9PT0ocz10Lmhvc3RDb25uZWN0ZWQpfHx2b2lkIDA9PT1zfHxzLmNhbGwodCkpfXJlbW92ZUNvbnRyb2xsZXIodCl7dmFyIGk7bnVsbD09PShpPXRoaXMuXyRFZyl8fHZvaWQgMD09PWl8fGkuc3BsaWNlKHRoaXMuXyRFZy5pbmRleE9mKHQpPj4+MCwxKX1fJEVtKCl7dGhpcy5jb25zdHJ1Y3Rvci5lbGVtZW50UHJvcGVydGllcy5mb3JFYWNoKCgodCxpKT0+e3RoaXMuaGFzT3duUHJvcGVydHkoaSkmJih0aGlzLl8kRXQuc2V0KGksdGhpc1tpXSksZGVsZXRlIHRoaXNbaV0pfSkpfWNyZWF0ZVJlbmRlclJvb3QoKXt2YXIgdDtjb25zdCBzPW51bGwhPT0odD10aGlzLnNoYWRvd1Jvb3QpJiZ2b2lkIDAhPT10P3Q6dGhpcy5hdHRhY2hTaGFkb3codGhpcy5jb25zdHJ1Y3Rvci5zaGFkb3dSb290T3B0aW9ucyk7cmV0dXJuIGkocyx0aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRTdHlsZXMpLHN9Y29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDt2b2lkIDA9PT10aGlzLnJlbmRlclJvb3QmJih0aGlzLnJlbmRlclJvb3Q9dGhpcy5jcmVhdGVSZW5kZXJSb290KCkpLHRoaXMuZW5hYmxlVXBkYXRpbmcoITApLG51bGw9PT0odD10aGlzLl8kRWcpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdENvbm5lY3RlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKX1lbmFibGVVcGRhdGluZyh0KXt9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtudWxsPT09KHQ9dGhpcy5fJEVnKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3REaXNjb25uZWN0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSl9YXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHQsaSxzKXt0aGlzLl8kQUsodCxzKX1fJEVTKHQsaSxzPWwpe3ZhciBlLHI7Y29uc3QgaD10aGlzLmNvbnN0cnVjdG9yLl8kRWgodCxzKTtpZih2b2lkIDAhPT1oJiYhMD09PXMucmVmbGVjdCl7Y29uc3Qgbj0obnVsbCE9PShyPW51bGw9PT0oZT1zLmNvbnZlcnRlcil8fHZvaWQgMD09PWU/dm9pZCAwOmUudG9BdHRyaWJ1dGUpJiZ2b2lkIDAhPT1yP3I6by50b0F0dHJpYnV0ZSkoaSxzLnR5cGUpO3RoaXMuXyRFaT10LG51bGw9PW4/dGhpcy5yZW1vdmVBdHRyaWJ1dGUoaCk6dGhpcy5zZXRBdHRyaWJ1dGUoaCxuKSx0aGlzLl8kRWk9bnVsbH19XyRBSyh0LGkpe3ZhciBzLGUscjtjb25zdCBoPXRoaXMuY29uc3RydWN0b3Isbj1oLl8kRXUuZ2V0KHQpO2lmKHZvaWQgMCE9PW4mJnRoaXMuXyRFaSE9PW4pe2NvbnN0IHQ9aC5nZXRQcm9wZXJ0eU9wdGlvbnMobiksbD10LmNvbnZlcnRlcixhPW51bGwhPT0ocj1udWxsIT09KGU9bnVsbD09PShzPWwpfHx2b2lkIDA9PT1zP3ZvaWQgMDpzLmZyb21BdHRyaWJ1dGUpJiZ2b2lkIDAhPT1lP2U6XCJmdW5jdGlvblwiPT10eXBlb2YgbD9sOm51bGwpJiZ2b2lkIDAhPT1yP3I6by5mcm9tQXR0cmlidXRlO3RoaXMuXyRFaT1uLHRoaXNbbl09YShpLHQudHlwZSksdGhpcy5fJEVpPW51bGx9fXJlcXVlc3RVcGRhdGUodCxpLHMpe2xldCBlPSEwO3ZvaWQgMCE9PXQmJigoKHM9c3x8dGhpcy5jb25zdHJ1Y3Rvci5nZXRQcm9wZXJ0eU9wdGlvbnModCkpLmhhc0NoYW5nZWR8fG4pKHRoaXNbdF0saSk/KHRoaXMuXyRBTC5oYXModCl8fHRoaXMuXyRBTC5zZXQodCxpKSwhMD09PXMucmVmbGVjdCYmdGhpcy5fJEVpIT09dCYmKHZvaWQgMD09PXRoaXMuXyRFXyYmKHRoaXMuXyRFXz1uZXcgTWFwKSx0aGlzLl8kRV8uc2V0KHQscykpKTplPSExKSwhdGhpcy5pc1VwZGF0ZVBlbmRpbmcmJmUmJih0aGlzLl8kRXA9dGhpcy5fJEVDKCkpfWFzeW5jIF8kRUMoKXt0aGlzLmlzVXBkYXRlUGVuZGluZz0hMDt0cnl7YXdhaXQgdGhpcy5fJEVwfWNhdGNoKHQpe1Byb21pc2UucmVqZWN0KHQpfWNvbnN0IHQ9dGhpcy5zY2hlZHVsZVVwZGF0ZSgpO3JldHVybiBudWxsIT10JiZhd2FpdCB0LCF0aGlzLmlzVXBkYXRlUGVuZGluZ31zY2hlZHVsZVVwZGF0ZSgpe3JldHVybiB0aGlzLnBlcmZvcm1VcGRhdGUoKX1wZXJmb3JtVXBkYXRlKCl7dmFyIHQ7aWYoIXRoaXMuaXNVcGRhdGVQZW5kaW5nKXJldHVybjt0aGlzLmhhc1VwZGF0ZWQsdGhpcy5fJEV0JiYodGhpcy5fJEV0LmZvckVhY2goKCh0LGkpPT50aGlzW2ldPXQpKSx0aGlzLl8kRXQ9dm9pZCAwKTtsZXQgaT0hMTtjb25zdCBzPXRoaXMuXyRBTDt0cnl7aT10aGlzLnNob3VsZFVwZGF0ZShzKSxpPyh0aGlzLndpbGxVcGRhdGUocyksbnVsbD09PSh0PXRoaXMuXyRFZyl8fHZvaWQgMD09PXR8fHQuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0VXBkYXRlKXx8dm9pZCAwPT09aT92b2lkIDA6aS5jYWxsKHQpfSkpLHRoaXMudXBkYXRlKHMpKTp0aGlzLl8kRVUoKX1jYXRjaCh0KXt0aHJvdyBpPSExLHRoaXMuXyRFVSgpLHR9aSYmdGhpcy5fJEFFKHMpfXdpbGxVcGRhdGUodCl7fV8kQUUodCl7dmFyIGk7bnVsbD09PShpPXRoaXMuXyRFZyl8fHZvaWQgMD09PWl8fGkuZm9yRWFjaCgodD0+e3ZhciBpO3JldHVybiBudWxsPT09KGk9dC5ob3N0VXBkYXRlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKSx0aGlzLmhhc1VwZGF0ZWR8fCh0aGlzLmhhc1VwZGF0ZWQ9ITAsdGhpcy5maXJzdFVwZGF0ZWQodCkpLHRoaXMudXBkYXRlZCh0KX1fJEVVKCl7dGhpcy5fJEFMPW5ldyBNYXAsdGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITF9Z2V0IHVwZGF0ZUNvbXBsZXRlKCl7cmV0dXJuIHRoaXMuZ2V0VXBkYXRlQ29tcGxldGUoKX1nZXRVcGRhdGVDb21wbGV0ZSgpe3JldHVybiB0aGlzLl8kRXB9c2hvdWxkVXBkYXRlKHQpe3JldHVybiEwfXVwZGF0ZSh0KXt2b2lkIDAhPT10aGlzLl8kRV8mJih0aGlzLl8kRV8uZm9yRWFjaCgoKHQsaSk9PnRoaXMuXyRFUyhpLHRoaXNbaV0sdCkpKSx0aGlzLl8kRV89dm9pZCAwKSx0aGlzLl8kRVUoKX11cGRhdGVkKHQpe31maXJzdFVwZGF0ZWQodCl7fX1hLmZpbmFsaXplZD0hMCxhLmVsZW1lbnRQcm9wZXJ0aWVzPW5ldyBNYXAsYS5lbGVtZW50U3R5bGVzPVtdLGEuc2hhZG93Um9vdE9wdGlvbnM9e21vZGU6XCJvcGVuXCJ9LG51bGw9PWh8fGgoe1JlYWN0aXZlRWxlbWVudDphfSksKG51bGwhPT0ocz1nbG9iYWxUaGlzLnJlYWN0aXZlRWxlbWVudFZlcnNpb25zKSYmdm9pZCAwIT09cz9zOmdsb2JhbFRoaXMucmVhY3RpdmVFbGVtZW50VmVyc2lvbnM9W10pLnB1c2goXCIxLjEuMVwiKTtleHBvcnR7YSBhcyBSZWFjdGl2ZUVsZW1lbnQsbyBhcyBkZWZhdWx0Q29udmVydGVyLG4gYXMgbm90RXF1YWx9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3RpdmUtZWxlbWVudC5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xudmFyIHQ7Y29uc3QgaT1nbG9iYWxUaGlzLnRydXN0ZWRUeXBlcyxzPWk/aS5jcmVhdGVQb2xpY3koXCJsaXQtaHRtbFwiLHtjcmVhdGVIVE1MOnQ9PnR9KTp2b2lkIDAsZT1gbGl0JCR7KE1hdGgucmFuZG9tKCkrXCJcIikuc2xpY2UoOSl9JGAsbz1cIj9cIitlLG49YDwke299PmAsbD1kb2N1bWVudCxoPSh0PVwiXCIpPT5sLmNyZWF0ZUNvbW1lbnQodCkscj10PT5udWxsPT09dHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQsZD1BcnJheS5pc0FycmF5LHU9dD0+e3ZhciBpO3JldHVybiBkKHQpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZihudWxsPT09KGk9dCl8fHZvaWQgMD09PWk/dm9pZCAwOmlbU3ltYm9sLml0ZXJhdG9yXSl9LGM9LzwoPzooIS0tfFxcL1teYS16QS1aXSl8KFxcLz9bYS16QS1aXVtePlxcc10qKXwoXFwvPyQpKS9nLHY9Ly0tPi9nLGE9Lz4vZyxmPS8+fFsgXHRcXG5cZlxccl0oPzooW15cXHNcIic+PS9dKykoWyBcdFxcblxmXFxyXSo9WyBcdFxcblxmXFxyXSooPzpbXiBcdFxcblxmXFxyXCInYDw+PV18KFwifCcpfCkpfCQpL2csXz0vJy9nLG09L1wiL2csZz0vXig/OnNjcmlwdHxzdHlsZXx0ZXh0YXJlYSkkL2kscD10PT4oaSwuLi5zKT0+KHtfJGxpdFR5cGUkOnQsc3RyaW5nczppLHZhbHVlczpzfSksJD1wKDEpLHk9cCgyKSxiPVN5bWJvbC5mb3IoXCJsaXQtbm9DaGFuZ2VcIiksdz1TeW1ib2wuZm9yKFwibGl0LW5vdGhpbmdcIiksVD1uZXcgV2Vha01hcCx4PSh0LGkscyk9Pnt2YXIgZSxvO2NvbnN0IG49bnVsbCE9PShlPW51bGw9PXM/dm9pZCAwOnMucmVuZGVyQmVmb3JlKSYmdm9pZCAwIT09ZT9lOmk7bGV0IGw9bi5fJGxpdFBhcnQkO2lmKHZvaWQgMD09PWwpe2NvbnN0IHQ9bnVsbCE9PShvPW51bGw9PXM/dm9pZCAwOnMucmVuZGVyQmVmb3JlKSYmdm9pZCAwIT09bz9vOm51bGw7bi5fJGxpdFBhcnQkPWw9bmV3IE4oaS5pbnNlcnRCZWZvcmUoaCgpLHQpLHQsdm9pZCAwLG51bGwhPXM/czp7fSl9cmV0dXJuIGwuXyRBSSh0KSxsfSxBPWwuY3JlYXRlVHJlZVdhbGtlcihsLDEyOSxudWxsLCExKSxDPSh0LGkpPT57Y29uc3Qgbz10Lmxlbmd0aC0xLGw9W107bGV0IGgscj0yPT09aT9cIjxzdmc+XCI6XCJcIixkPWM7Zm9yKGxldCBpPTA7aTxvO2krKyl7Y29uc3Qgcz10W2ldO2xldCBvLHUscD0tMSwkPTA7Zm9yKDskPHMubGVuZ3RoJiYoZC5sYXN0SW5kZXg9JCx1PWQuZXhlYyhzKSxudWxsIT09dSk7KSQ9ZC5sYXN0SW5kZXgsZD09PWM/XCIhLS1cIj09PXVbMV0/ZD12OnZvaWQgMCE9PXVbMV0/ZD1hOnZvaWQgMCE9PXVbMl0/KGcudGVzdCh1WzJdKSYmKGg9UmVnRXhwKFwiPC9cIit1WzJdLFwiZ1wiKSksZD1mKTp2b2lkIDAhPT11WzNdJiYoZD1mKTpkPT09Zj9cIj5cIj09PXVbMF0/KGQ9bnVsbCE9aD9oOmMscD0tMSk6dm9pZCAwPT09dVsxXT9wPS0yOihwPWQubGFzdEluZGV4LXVbMl0ubGVuZ3RoLG89dVsxXSxkPXZvaWQgMD09PXVbM10/ZjonXCInPT09dVszXT9tOl8pOmQ9PT1tfHxkPT09Xz9kPWY6ZD09PXZ8fGQ9PT1hP2Q9YzooZD1mLGg9dm9pZCAwKTtjb25zdCB5PWQ9PT1mJiZ0W2krMV0uc3RhcnRzV2l0aChcIi8+XCIpP1wiIFwiOlwiXCI7cis9ZD09PWM/cytuOnA+PTA/KGwucHVzaChvKSxzLnNsaWNlKDAscCkrXCIkbGl0JFwiK3Muc2xpY2UocCkrZSt5KTpzK2UrKC0yPT09cD8obC5wdXNoKHZvaWQgMCksaSk6eSl9Y29uc3QgdT1yKyh0W29dfHxcIjw/PlwiKSsoMj09PWk/XCI8L3N2Zz5cIjpcIlwiKTtpZighQXJyYXkuaXNBcnJheSh0KXx8IXQuaGFzT3duUHJvcGVydHkoXCJyYXdcIikpdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHRlbXBsYXRlIHN0cmluZ3MgYXJyYXlcIik7cmV0dXJuW3ZvaWQgMCE9PXM/cy5jcmVhdGVIVE1MKHUpOnUsbF19O2NsYXNzIEV7Y29uc3RydWN0b3Ioe3N0cmluZ3M6dCxfJGxpdFR5cGUkOnN9LG4pe2xldCBsO3RoaXMucGFydHM9W107bGV0IHI9MCxkPTA7Y29uc3QgdT10Lmxlbmd0aC0xLGM9dGhpcy5wYXJ0cyxbdixhXT1DKHQscyk7aWYodGhpcy5lbD1FLmNyZWF0ZUVsZW1lbnQodixuKSxBLmN1cnJlbnROb2RlPXRoaXMuZWwuY29udGVudCwyPT09cyl7Y29uc3QgdD10aGlzLmVsLmNvbnRlbnQsaT10LmZpcnN0Q2hpbGQ7aS5yZW1vdmUoKSx0LmFwcGVuZCguLi5pLmNoaWxkTm9kZXMpfWZvcig7bnVsbCE9PShsPUEubmV4dE5vZGUoKSkmJmMubGVuZ3RoPHU7KXtpZigxPT09bC5ub2RlVHlwZSl7aWYobC5oYXNBdHRyaWJ1dGVzKCkpe2NvbnN0IHQ9W107Zm9yKGNvbnN0IGkgb2YgbC5nZXRBdHRyaWJ1dGVOYW1lcygpKWlmKGkuZW5kc1dpdGgoXCIkbGl0JFwiKXx8aS5zdGFydHNXaXRoKGUpKXtjb25zdCBzPWFbZCsrXTtpZih0LnB1c2goaSksdm9pZCAwIT09cyl7Y29uc3QgdD1sLmdldEF0dHJpYnV0ZShzLnRvTG93ZXJDYXNlKCkrXCIkbGl0JFwiKS5zcGxpdChlKSxpPS8oWy4/QF0pPyguKikvLmV4ZWMocyk7Yy5wdXNoKHt0eXBlOjEsaW5kZXg6cixuYW1lOmlbMl0sc3RyaW5nczp0LGN0b3I6XCIuXCI9PT1pWzFdP006XCI/XCI9PT1pWzFdP0g6XCJAXCI9PT1pWzFdP0k6U30pfWVsc2UgYy5wdXNoKHt0eXBlOjYsaW5kZXg6cn0pfWZvcihjb25zdCBpIG9mIHQpbC5yZW1vdmVBdHRyaWJ1dGUoaSl9aWYoZy50ZXN0KGwudGFnTmFtZSkpe2NvbnN0IHQ9bC50ZXh0Q29udGVudC5zcGxpdChlKSxzPXQubGVuZ3RoLTE7aWYocz4wKXtsLnRleHRDb250ZW50PWk/aS5lbXB0eVNjcmlwdDpcIlwiO2ZvcihsZXQgaT0wO2k8cztpKyspbC5hcHBlbmQodFtpXSxoKCkpLEEubmV4dE5vZGUoKSxjLnB1c2goe3R5cGU6MixpbmRleDorK3J9KTtsLmFwcGVuZCh0W3NdLGgoKSl9fX1lbHNlIGlmKDg9PT1sLm5vZGVUeXBlKWlmKGwuZGF0YT09PW8pYy5wdXNoKHt0eXBlOjIsaW5kZXg6cn0pO2Vsc2V7bGV0IHQ9LTE7Zm9yKDstMSE9PSh0PWwuZGF0YS5pbmRleE9mKGUsdCsxKSk7KWMucHVzaCh7dHlwZTo3LGluZGV4OnJ9KSx0Kz1lLmxlbmd0aC0xfXIrK319c3RhdGljIGNyZWF0ZUVsZW1lbnQodCxpKXtjb25zdCBzPWwuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO3JldHVybiBzLmlubmVySFRNTD10LHN9fWZ1bmN0aW9uIFAodCxpLHM9dCxlKXt2YXIgbyxuLGwsaDtpZihpPT09YilyZXR1cm4gaTtsZXQgZD12b2lkIDAhPT1lP251bGw9PT0obz1zLl8kQ2wpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvW2VdOnMuXyRDdTtjb25zdCB1PXIoaSk/dm9pZCAwOmkuXyRsaXREaXJlY3RpdmUkO3JldHVybihudWxsPT1kP3ZvaWQgMDpkLmNvbnN0cnVjdG9yKSE9PXUmJihudWxsPT09KG49bnVsbD09ZD92b2lkIDA6ZC5fJEFPKXx8dm9pZCAwPT09bnx8bi5jYWxsKGQsITEpLHZvaWQgMD09PXU/ZD12b2lkIDA6KGQ9bmV3IHUodCksZC5fJEFUKHQscyxlKSksdm9pZCAwIT09ZT8obnVsbCE9PShsPShoPXMpLl8kQ2wpJiZ2b2lkIDAhPT1sP2w6aC5fJENsPVtdKVtlXT1kOnMuXyRDdT1kKSx2b2lkIDAhPT1kJiYoaT1QKHQsZC5fJEFTKHQsaS52YWx1ZXMpLGQsZSkpLGl9Y2xhc3MgVntjb25zdHJ1Y3Rvcih0LGkpe3RoaXMudj1bXSx0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBRD10LHRoaXMuXyRBTT1pfWdldCBwYXJlbnROb2RlKCl7cmV0dXJuIHRoaXMuXyRBTS5wYXJlbnROb2RlfWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfXAodCl7dmFyIGk7Y29uc3R7ZWw6e2NvbnRlbnQ6c30scGFydHM6ZX09dGhpcy5fJEFELG89KG51bGwhPT0oaT1udWxsPT10P3ZvaWQgMDp0LmNyZWF0aW9uU2NvcGUpJiZ2b2lkIDAhPT1pP2k6bCkuaW1wb3J0Tm9kZShzLCEwKTtBLmN1cnJlbnROb2RlPW87bGV0IG49QS5uZXh0Tm9kZSgpLGg9MCxyPTAsZD1lWzBdO2Zvcig7dm9pZCAwIT09ZDspe2lmKGg9PT1kLmluZGV4KXtsZXQgaTsyPT09ZC50eXBlP2k9bmV3IE4obixuLm5leHRTaWJsaW5nLHRoaXMsdCk6MT09PWQudHlwZT9pPW5ldyBkLmN0b3IobixkLm5hbWUsZC5zdHJpbmdzLHRoaXMsdCk6Nj09PWQudHlwZSYmKGk9bmV3IEwobix0aGlzLHQpKSx0aGlzLnYucHVzaChpKSxkPWVbKytyXX1oIT09KG51bGw9PWQ/dm9pZCAwOmQuaW5kZXgpJiYobj1BLm5leHROb2RlKCksaCsrKX1yZXR1cm4gb31tKHQpe2xldCBpPTA7Zm9yKGNvbnN0IHMgb2YgdGhpcy52KXZvaWQgMCE9PXMmJih2b2lkIDAhPT1zLnN0cmluZ3M/KHMuXyRBSSh0LHMsaSksaSs9cy5zdHJpbmdzLmxlbmd0aC0yKTpzLl8kQUkodFtpXSkpLGkrK319Y2xhc3MgTntjb25zdHJ1Y3Rvcih0LGkscyxlKXt2YXIgbzt0aGlzLnR5cGU9Mix0aGlzLl8kQUg9dyx0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBQT10LHRoaXMuXyRBQj1pLHRoaXMuXyRBTT1zLHRoaXMub3B0aW9ucz1lLHRoaXMuXyRDZz1udWxsPT09KG89bnVsbD09ZT92b2lkIDA6ZS5pc0Nvbm5lY3RlZCl8fHZvaWQgMD09PW98fG99Z2V0IF8kQVUoKXt2YXIgdCxpO3JldHVybiBudWxsIT09KGk9bnVsbD09PSh0PXRoaXMuXyRBTSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuXyRBVSkmJnZvaWQgMCE9PWk/aTp0aGlzLl8kQ2d9Z2V0IHBhcmVudE5vZGUoKXtsZXQgdD10aGlzLl8kQUEucGFyZW50Tm9kZTtjb25zdCBpPXRoaXMuXyRBTTtyZXR1cm4gdm9pZCAwIT09aSYmMTE9PT10Lm5vZGVUeXBlJiYodD1pLnBhcmVudE5vZGUpLHR9Z2V0IHN0YXJ0Tm9kZSgpe3JldHVybiB0aGlzLl8kQUF9Z2V0IGVuZE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFCfV8kQUkodCxpPXRoaXMpe3Q9UCh0aGlzLHQsaSkscih0KT90PT09d3x8bnVsbD09dHx8XCJcIj09PXQ/KHRoaXMuXyRBSCE9PXcmJnRoaXMuXyRBUigpLHRoaXMuXyRBSD13KTp0IT09dGhpcy5fJEFIJiZ0IT09YiYmdGhpcy4kKHQpOnZvaWQgMCE9PXQuXyRsaXRUeXBlJD90aGlzLlQodCk6dm9pZCAwIT09dC5ub2RlVHlwZT90aGlzLlModCk6dSh0KT90aGlzLkEodCk6dGhpcy4kKHQpfU0odCxpPXRoaXMuXyRBQil7cmV0dXJuIHRoaXMuXyRBQS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LGkpfVModCl7dGhpcy5fJEFIIT09dCYmKHRoaXMuXyRBUigpLHRoaXMuXyRBSD10aGlzLk0odCkpfSQodCl7dGhpcy5fJEFIIT09dyYmcih0aGlzLl8kQUgpP3RoaXMuXyRBQS5uZXh0U2libGluZy5kYXRhPXQ6dGhpcy5TKGwuY3JlYXRlVGV4dE5vZGUodCkpLHRoaXMuXyRBSD10fVQodCl7dmFyIGk7Y29uc3R7dmFsdWVzOnMsXyRsaXRUeXBlJDplfT10LG89XCJudW1iZXJcIj09dHlwZW9mIGU/dGhpcy5fJEFDKHQpOih2b2lkIDA9PT1lLmVsJiYoZS5lbD1FLmNyZWF0ZUVsZW1lbnQoZS5oLHRoaXMub3B0aW9ucykpLGUpO2lmKChudWxsPT09KGk9dGhpcy5fJEFIKXx8dm9pZCAwPT09aT92b2lkIDA6aS5fJEFEKT09PW8pdGhpcy5fJEFILm0ocyk7ZWxzZXtjb25zdCB0PW5ldyBWKG8sdGhpcyksaT10LnAodGhpcy5vcHRpb25zKTt0Lm0ocyksdGhpcy5TKGkpLHRoaXMuXyRBSD10fX1fJEFDKHQpe2xldCBpPVQuZ2V0KHQuc3RyaW5ncyk7cmV0dXJuIHZvaWQgMD09PWkmJlQuc2V0KHQuc3RyaW5ncyxpPW5ldyBFKHQpKSxpfUEodCl7ZCh0aGlzLl8kQUgpfHwodGhpcy5fJEFIPVtdLHRoaXMuXyRBUigpKTtjb25zdCBpPXRoaXMuXyRBSDtsZXQgcyxlPTA7Zm9yKGNvbnN0IG8gb2YgdCllPT09aS5sZW5ndGg/aS5wdXNoKHM9bmV3IE4odGhpcy5NKGgoKSksdGhpcy5NKGgoKSksdGhpcyx0aGlzLm9wdGlvbnMpKTpzPWlbZV0scy5fJEFJKG8pLGUrKztlPGkubGVuZ3RoJiYodGhpcy5fJEFSKHMmJnMuXyRBQi5uZXh0U2libGluZyxlKSxpLmxlbmd0aD1lKX1fJEFSKHQ9dGhpcy5fJEFBLm5leHRTaWJsaW5nLGkpe3ZhciBzO2ZvcihudWxsPT09KHM9dGhpcy5fJEFQKXx8dm9pZCAwPT09c3x8cy5jYWxsKHRoaXMsITEsITAsaSk7dCYmdCE9PXRoaXMuXyRBQjspe2NvbnN0IGk9dC5uZXh0U2libGluZzt0LnJlbW92ZSgpLHQ9aX19c2V0Q29ubmVjdGVkKHQpe3ZhciBpO3ZvaWQgMD09PXRoaXMuXyRBTSYmKHRoaXMuXyRDZz10LG51bGw9PT0oaT10aGlzLl8kQVApfHx2b2lkIDA9PT1pfHxpLmNhbGwodGhpcyx0KSl9fWNsYXNzIFN7Y29uc3RydWN0b3IodCxpLHMsZSxvKXt0aGlzLnR5cGU9MSx0aGlzLl8kQUg9dyx0aGlzLl8kQU49dm9pZCAwLHRoaXMuZWxlbWVudD10LHRoaXMubmFtZT1pLHRoaXMuXyRBTT1lLHRoaXMub3B0aW9ucz1vLHMubGVuZ3RoPjJ8fFwiXCIhPT1zWzBdfHxcIlwiIT09c1sxXT8odGhpcy5fJEFIPUFycmF5KHMubGVuZ3RoLTEpLmZpbGwobmV3IFN0cmluZyksdGhpcy5zdHJpbmdzPXMpOnRoaXMuXyRBSD13fWdldCB0YWdOYW1lKCl7cmV0dXJuIHRoaXMuZWxlbWVudC50YWdOYW1lfWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfV8kQUkodCxpPXRoaXMscyxlKXtjb25zdCBvPXRoaXMuc3RyaW5ncztsZXQgbj0hMTtpZih2b2lkIDA9PT1vKXQ9UCh0aGlzLHQsaSwwKSxuPSFyKHQpfHx0IT09dGhpcy5fJEFIJiZ0IT09YixuJiYodGhpcy5fJEFIPXQpO2Vsc2V7Y29uc3QgZT10O2xldCBsLGg7Zm9yKHQ9b1swXSxsPTA7bDxvLmxlbmd0aC0xO2wrKyloPVAodGhpcyxlW3MrbF0saSxsKSxoPT09YiYmKGg9dGhpcy5fJEFIW2xdKSxufHwobj0hcihoKXx8aCE9PXRoaXMuXyRBSFtsXSksaD09PXc/dD13OnQhPT13JiYodCs9KG51bGwhPWg/aDpcIlwiKStvW2wrMV0pLHRoaXMuXyRBSFtsXT1ofW4mJiFlJiZ0aGlzLmsodCl9ayh0KXt0PT09dz90aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHRoaXMubmFtZSk6dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSh0aGlzLm5hbWUsbnVsbCE9dD90OlwiXCIpfX1jbGFzcyBNIGV4dGVuZHMgU3tjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy50eXBlPTN9ayh0KXt0aGlzLmVsZW1lbnRbdGhpcy5uYW1lXT10PT09dz92b2lkIDA6dH19Y29uc3Qgaz1pP2kuZW1wdHlTY3JpcHQ6XCJcIjtjbGFzcyBIIGV4dGVuZHMgU3tjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy50eXBlPTR9ayh0KXt0JiZ0IT09dz90aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSxrKTp0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHRoaXMubmFtZSl9fWNsYXNzIEkgZXh0ZW5kcyBTe2NvbnN0cnVjdG9yKHQsaSxzLGUsbyl7c3VwZXIodCxpLHMsZSxvKSx0aGlzLnR5cGU9NX1fJEFJKHQsaT10aGlzKXt2YXIgcztpZigodD1udWxsIT09KHM9UCh0aGlzLHQsaSwwKSkmJnZvaWQgMCE9PXM/czp3KT09PWIpcmV0dXJuO2NvbnN0IGU9dGhpcy5fJEFILG89dD09PXcmJmUhPT13fHx0LmNhcHR1cmUhPT1lLmNhcHR1cmV8fHQub25jZSE9PWUub25jZXx8dC5wYXNzaXZlIT09ZS5wYXNzaXZlLG49dCE9PXcmJihlPT09d3x8byk7byYmdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5uYW1lLHRoaXMsZSksbiYmdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodGhpcy5uYW1lLHRoaXMsdCksdGhpcy5fJEFIPXR9aGFuZGxlRXZlbnQodCl7dmFyIGkscztcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLl8kQUg/dGhpcy5fJEFILmNhbGwobnVsbCE9PShzPW51bGw9PT0oaT10aGlzLm9wdGlvbnMpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmhvc3QpJiZ2b2lkIDAhPT1zP3M6dGhpcy5lbGVtZW50LHQpOnRoaXMuXyRBSC5oYW5kbGVFdmVudCh0KX19Y2xhc3MgTHtjb25zdHJ1Y3Rvcih0LGkscyl7dGhpcy5lbGVtZW50PXQsdGhpcy50eXBlPTYsdGhpcy5fJEFOPXZvaWQgMCx0aGlzLl8kQU09aSx0aGlzLm9wdGlvbnM9c31nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX1fJEFJKHQpe1AodGhpcyx0KX19Y29uc3QgUj17UDpcIiRsaXQkXCIsVjplLEw6byxJOjEsTjpDLFI6VixEOnUsajpQLEg6TixPOlMsRjpILEI6SSxXOk0sWjpMfSx6PXdpbmRvdy5saXRIdG1sUG9seWZpbGxTdXBwb3J0O251bGw9PXp8fHooRSxOKSwobnVsbCE9PSh0PWdsb2JhbFRoaXMubGl0SHRtbFZlcnNpb25zKSYmdm9pZCAwIT09dD90Omdsb2JhbFRoaXMubGl0SHRtbFZlcnNpb25zPVtdKS5wdXNoKFwiMi4xLjFcIik7ZXhwb3J0e1IgYXMgXyRMSCwkIGFzIGh0bWwsYiBhcyBub0NoYW5nZSx3IGFzIG5vdGhpbmcseCBhcyByZW5kZXIseSBhcyBzdmd9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl0LWh0bWwuanMubWFwXG4iLCJpbXBvcnR7UmVhY3RpdmVFbGVtZW50IGFzIHR9ZnJvbVwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50XCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudFwiO2ltcG9ydHtyZW5kZXIgYXMgZSxub0NoYW5nZSBhcyBpfWZyb21cImxpdC1odG1sXCI7ZXhwb3J0KmZyb21cImxpdC1odG1sXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi92YXIgbCxvO2NvbnN0IHI9dDtjbGFzcyBzIGV4dGVuZHMgdHtjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy5yZW5kZXJPcHRpb25zPXtob3N0OnRoaXN9LHRoaXMuXyREdD12b2lkIDB9Y3JlYXRlUmVuZGVyUm9vdCgpe3ZhciB0LGU7Y29uc3QgaT1zdXBlci5jcmVhdGVSZW5kZXJSb290KCk7cmV0dXJuIG51bGwhPT0odD0oZT10aGlzLnJlbmRlck9wdGlvbnMpLnJlbmRlckJlZm9yZSkmJnZvaWQgMCE9PXR8fChlLnJlbmRlckJlZm9yZT1pLmZpcnN0Q2hpbGQpLGl9dXBkYXRlKHQpe2NvbnN0IGk9dGhpcy5yZW5kZXIoKTt0aGlzLmhhc1VwZGF0ZWR8fCh0aGlzLnJlbmRlck9wdGlvbnMuaXNDb25uZWN0ZWQ9dGhpcy5pc0Nvbm5lY3RlZCksc3VwZXIudXBkYXRlKHQpLHRoaXMuXyREdD1lKGksdGhpcy5yZW5kZXJSb290LHRoaXMucmVuZGVyT3B0aW9ucyl9Y29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpLG51bGw9PT0odD10aGlzLl8kRHQpfHx2b2lkIDA9PT10fHx0LnNldENvbm5lY3RlZCghMCl9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpLG51bGw9PT0odD10aGlzLl8kRHQpfHx2b2lkIDA9PT10fHx0LnNldENvbm5lY3RlZCghMSl9cmVuZGVyKCl7cmV0dXJuIGl9fXMuZmluYWxpemVkPSEwLHMuXyRsaXRFbGVtZW50JD0hMCxudWxsPT09KGw9Z2xvYmFsVGhpcy5saXRFbGVtZW50SHlkcmF0ZVN1cHBvcnQpfHx2b2lkIDA9PT1sfHxsLmNhbGwoZ2xvYmFsVGhpcyx7TGl0RWxlbWVudDpzfSk7Y29uc3Qgbj1nbG9iYWxUaGlzLmxpdEVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQ7bnVsbD09bnx8bih7TGl0RWxlbWVudDpzfSk7Y29uc3QgaD17XyRBSzoodCxlLGkpPT57dC5fJEFLKGUsaSl9LF8kQUw6dD0+dC5fJEFMfTsobnVsbCE9PShvPWdsb2JhbFRoaXMubGl0RWxlbWVudFZlcnNpb25zKSYmdm9pZCAwIT09bz9vOmdsb2JhbFRoaXMubGl0RWxlbWVudFZlcnNpb25zPVtdKS5wdXNoKFwiMy4xLjFcIik7ZXhwb3J0e3MgYXMgTGl0RWxlbWVudCxyIGFzIFVwZGF0aW5nRWxlbWVudCxoIGFzIF8kTEV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl0LWVsZW1lbnQuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IGk9KGksZSk9PlwibWV0aG9kXCI9PT1lLmtpbmQmJmUuZGVzY3JpcHRvciYmIShcInZhbHVlXCJpbiBlLmRlc2NyaXB0b3IpP3suLi5lLGZpbmlzaGVyKG4pe24uY3JlYXRlUHJvcGVydHkoZS5rZXksaSl9fTp7a2luZDpcImZpZWxkXCIsa2V5OlN5bWJvbCgpLHBsYWNlbWVudDpcIm93blwiLGRlc2NyaXB0b3I6e30sb3JpZ2luYWxLZXk6ZS5rZXksaW5pdGlhbGl6ZXIoKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmluaXRpYWxpemVyJiYodGhpc1tlLmtleV09ZS5pbml0aWFsaXplci5jYWxsKHRoaXMpKX0sZmluaXNoZXIobil7bi5jcmVhdGVQcm9wZXJ0eShlLmtleSxpKX19O2Z1bmN0aW9uIGUoZSl7cmV0dXJuKG4sdCk9PnZvaWQgMCE9PXQ/KChpLGUsbik9PntlLmNvbnN0cnVjdG9yLmNyZWF0ZVByb3BlcnR5KG4saSl9KShlLG4sdCk6aShlLG4pfWV4cG9ydHtlIGFzIHByb3BlcnR5fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BlcnR5LmpzLm1hcFxuIiwiaW1wb3J0e3Byb3BlcnR5IGFzIHJ9ZnJvbVwiLi9wcm9wZXJ0eS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovZnVuY3Rpb24gdCh0KXtyZXR1cm4gcih7Li4udCxzdGF0ZTohMH0pfWV4cG9ydHt0IGFzIHN0YXRlfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRlLmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCBuPW49PmU9PlwiZnVuY3Rpb25cIj09dHlwZW9mIGU/KChuLGUpPT4od2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShuLGUpLGUpKShuLGUpOigobixlKT0+e2NvbnN0e2tpbmQ6dCxlbGVtZW50czppfT1lO3JldHVybntraW5kOnQsZWxlbWVudHM6aSxmaW5pc2hlcihlKXt3aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKG4sZSl9fX0pKG4sZSk7ZXhwb3J0e24gYXMgY3VzdG9tRWxlbWVudH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jdXN0b20tZWxlbWVudC5qcy5tYXBcbiIsImltcG9ydCB7IGh0bWwsIGNzcywgTGl0RWxlbWVudCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSwgc3RhdGUgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5cbmV4cG9ydCB0eXBlIEVudHJ5UmVjb3JkID0ge1xuICAgIGVudGl0eV9pZDogc3RyaW5nW107XG4gICAgZGV2aWNlX2lkOiBzdHJpbmdbXTtcbiAgICBhcmVhX2lkOiBzdHJpbmdbXTtcbn07XG5cbmV4cG9ydCB0eXBlIEVkaXRvclBhcmFtcyA9IHtcbiAgICBpZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgYWxsT246IGJvb2xlYW47XG4gICAgZW50cnk6IEVudHJ5UmVjb3JkO1xuICAgIGRvbWFpbjogc3RyaW5nO1xufTtcblxuQGN1c3RvbUVsZW1lbnQoXCJzdXBlci1ncm91cHMtZWRpdG9yXCIpXG5leHBvcnQgY2xhc3MgU3VwZXJHcm91cHNFZGl0b3IgZXh0ZW5kcyBMaXRFbGVtZW50IHtcblxuICAgIEBwcm9wZXJ0eSgpXG4gICAgZGF0YTogRWRpdG9yUGFyYW1zIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgQHByb3BlcnR5KClcbiAgICBoYXNzOiBhbnlcblxuICAgIHByb3RlY3RlZCB3aWxsVXBkYXRlKHByb3BzOiBNYXA8c3RyaW5nIHwgbnVtYmVyIHwgc3ltYm9sLCB1bmtub3duPik6IHZvaWQge1xuICAgICAgICBpZiAocHJvcHMuaGFzKFwiZGF0YVwiKSkge1xuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBzdGF0ZSgpXG4gICAgX2RhdGE6IEVkaXRvclBhcmFtcyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgIF9jYW5jZWwoKSB7XG4gICAgICAgIHRoaXMuX2RhdGEgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgX2Nsb3NlKCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdzYXZlJywge1xuICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5fZGF0YSxcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgYnViYmxlczogZmFsc2VcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLl9kYXRhID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIF90aXRsZUNoYW5nZWQoZXZlbnQ6IGFueSkge1xuICAgICAgICB0aGlzLl9kYXRhID0ge1xuICAgICAgICAgICAgLi4udGhpcy5fZGF0YSxcbiAgICAgICAgICAgIHRpdGxlOiBldmVudC5kZXRhaWwudmFsdWUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgX2FsbE9uQ2hhbmdlZChldmVudDogYW55KSB7XG4gICAgICAgIHRoaXMuX2RhdGEgPSB7XG4gICAgICAgICAgICAuLi50aGlzLl9kYXRhLFxuICAgICAgICAgICAgYWxsT246IGV2ZW50LmRldGFpbC52YWx1ZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBAcHJvcGVydHkoKVxuICAgIF90YXJnZXRTZWxlY3RvciA6IHt9ID0ge1xuICAgICAgICB0YXJnZXQ6IHt9LFxuICAgIH07XG5cbiAgICBfZG9tYWluTWFwOiBhbnkgPSB7XG4gICAgICAgIFwibGlnaHRcIjogXCJMaWdodFwiLFxuICAgICAgICBcImJpbmFyeV9zZW5zb3JcIjogXCJCaW5hcnkgU2Vuc29yXCIsXG4gICAgICAgIFwic3dpdGNoXCI6IFwiU3dpdGNoXCIsXG4gICAgfTtcblxuICAgIEBwcm9wZXJ0eSgpXG4gICAgX2RvbWFpblNlbGVjdG9yIDoge30gPSB7XG4gICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgb3B0aW9uczogW1wiTGlnaHRcIiwgXCJCaW5hcnkgU2Vuc29yXCIsIFwiU3dpdGNoXCJdLFxuICAgICAgICB9LFxuICAgIH07XG5cbiAgICBAcHJvcGVydHkoKVxuICAgIF9hbGxPblNlbGVjdG9yIDoge30gPSB7XG4gICAgICAgIGJvb2xlYW46IHt9LFxuICAgIH07XG5cbiAgICBfb25Eb21haW5DaGFuZ2VkKGV2ZW50OiBhbnkpIHtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5fZG9tYWluTWFwKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09IGV2ZW50LmRldGFpbC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuX2RhdGEsXG4gICAgICAgICAgICAgICAgICAgIGRvbWFpbjoga2V5XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBfb25FbnRyeUNoYW5nZWQoZXZlbnQ6IGFueSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGV2ZW50LmRldGFpbC52YWx1ZSBhcyBFbnRyeVJlY29yZDtcbiAgICAgICAgdGhpcy5fZGF0YSA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RhdGEsXG4gICAgICAgICAgICBlbnRyeTogdmFsdWUsXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIHByb3RlY3RlZCByZW5kZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZGF0YSkgcmV0dXJuIGh0bWxgYDtcbiAgICAgICAgY29uc3QgX3RpdGxlSW52YWxpZCA9ICF0aGlzLl9kYXRhLnRpdGxlLnRyaW0oKTtcbiAgICAgICAgbGV0IHRpdGxlUm93ID0gaHRtbGBgO1xuICAgICAgICBsZXQgZGlhbG9nVGl0bGUgPSB0aGlzLl9kYXRhLnRpdGxlO1xuICAgICAgICBsZXQgZG9tYWluU2VsZWN0b3IgPSBodG1sYGA7XG4gICAgICAgIGlmICghdGhpcy5fZGF0YS5pZCkge1xuICAgICAgICAgICAgdGl0bGVSb3cgPSBodG1sYFxuICAgICAgICAgICAgICAgIDxwYXBlci1pbnB1dFxuICAgICAgICAgICAgICAgICAgICAudmFsdWU9JHt0aGlzLl9kYXRhLnRpdGxlfVxuICAgICAgICAgICAgICAgICAgICBAdmFsdWUtY2hhbmdlZD0ke3RoaXMuX3RpdGxlQ2hhbmdlZH1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJHcm91cCBuYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgLmludmFsaWQ9JHtfdGl0bGVJbnZhbGlkfVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3JNZXNzYWdlPVwiTWFuZGF0b3J5IGZpZWxkXCJcbiAgICAgICAgICAgICAgICAgICAgZGlhbG9nSW5pdGlhbEZvY3VzXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDwvcGFwZXItaW5wdXQ+XG4gICAgICAgICAgICBgO1xuICAgICAgICAgICAgZGlhbG9nVGl0bGUgPSAnTmV3IFN1cGVyIEdyb3VwJztcbiAgICAgICAgICAgIGRvbWFpblNlbGVjdG9yID0gaHRtbGBcbiAgICAgICAgICAgICAgICA8aGEtc2VsZWN0b3JcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJHcm91cCB0eXBlXCJcbiAgICAgICAgICAgICAgICAgICAgLmhhc3M9JHt0aGlzLmhhc3N9XG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3Rvcj0ke3RoaXMuX2RvbWFpblNlbGVjdG9yfVxuICAgICAgICAgICAgICAgICAgICAudmFsdWU9JHt0aGlzLl9kb21haW5NYXBbdGhpcy5fZGF0YS5kb21haW5dfVxuICAgICAgICAgICAgICAgICAgICBAdmFsdWUtY2hhbmdlZD0ke3RoaXMuX29uRG9tYWluQ2hhbmdlZH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPC9oYS1zZWxlY3Rvcj4gICAgXG4gICAgICAgICAgICBgO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICA8aGEtZGlhbG9nIFxuICAgICAgICAgICAgc2NyaW1DbGlja0FjdGlvblxuICAgICAgICAgICAgZXNjYXBlS2V5QWN0aW9uXG4gICAgICAgICAgICAuaGVhZGluZz0ke2RpYWxvZ1RpdGxlfVxuICAgICAgICAgICAgb3BlblxuICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAke3RpdGxlUm93fVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICR7ZG9tYWluU2VsZWN0b3J9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGhhLXNlbGVjdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJUdXJuIE9OIGlmIGFsbCBncm91cGVkIGVudGl0aWVzIGFyZSBPTlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmhhc3M9JHt0aGlzLmhhc3N9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNlbGVjdG9yPSR7dGhpcy5fYWxsT25TZWxlY3Rvcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudmFsdWU9JHt0aGlzLl9kYXRhLmFsbE9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEB2YWx1ZS1jaGFuZ2VkPSR7dGhpcy5fYWxsT25DaGFuZ2VkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvaGEtc2VsZWN0b3ItdGFyZ2V0PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoYS1zZWxlY3RvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwiR3JvdXAgZW50cnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5oYXNzPSR7dGhpcy5oYXNzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZWxlY3Rvcj0ke3RoaXMuX3RhcmdldFNlbGVjdG9yfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52YWx1ZT0ke3RoaXMuX2RhdGEuZW50cnl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQHZhbHVlLWNoYW5nZWQ9JHt0aGlzLl9vbkVudHJ5Q2hhbmdlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvaGEtc2VsZWN0b3ItdGFyZ2V0PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPG13Yy1idXR0b25cbiAgICAgICAgICAgICAgICBAY2xpY2s9JHt0aGlzLl9jbG9zZX1cbiAgICAgICAgICAgICAgICBzbG90PVwicHJpbWFyeUFjdGlvblwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgU2F2ZVxuICAgICAgICAgICAgPC9td2MtYnV0dG9uPlxuICAgICAgICAgICAgPG13Yy1idXR0b25cbiAgICAgICAgICAgICAgICBAY2xpY2s9JHt0aGlzLl9jYW5jZWx9XG4gICAgICAgICAgICAgICAgc2xvdD1cInNlY29uZGFyeUFjdGlvblwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgQ2FuY2VsXG4gICAgICAgICAgICA8L213Yy1idXR0b24+XG4gICAgICAgIDwvaGEtZGlhbG9nPlxuICAgICAgICBgO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgc3R5bGVzKCkge1xuICAgICAgICByZXR1cm4gY3NzYFxuICAgICAgICAgICAgLmJvdHRvbVJvdyB7XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLnJvdyB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBodG1sLCBjc3MsIExpdEVsZW1lbnQgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgcHJvcGVydHksIHN0YXRlIH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgRWRpdG9yUGFyYW1zIH0gZnJvbSAnLi9lZGl0b3InO1xuaW1wb3J0ICcuL2VkaXRvcic7XG5cbmNvbnN0IHRhYnMgPSBbXG4gICAge1xuICAgICAgICBwYXRoOiBcIi9zdXBlcl9ncm91cHNcIixcbiAgICAgICAgbmFtZTogXCJTdXBlciBHcm91cHNcIixcbiAgICAgICAgaWNvbjogXCJoYXNzOnZpZXctZGFzaGJvYXJkXCIsXG4gICAgfVxuXTtcblxuQGN1c3RvbUVsZW1lbnQoXCJzdXBlci1ncm91cHMtcGFuZWxcIilcbmV4cG9ydCBjbGFzcyBTdXBlckdyb3Vwc1BhbmVsIGV4dGVuZHMgTGl0RWxlbWVudCB7XG5cbiAgICBAcHJvcGVydHkoKVxuICAgIGhhc3M6IGFueVxuXG4gICAgQHByb3BlcnR5KClcbiAgICBuYXJyb3c6IGJvb2xlYW5cblxuICAgIEBwcm9wZXJ0eSgpXG4gICAgcm91dGU6IG9iamVjdFxuXG4gICAgQHByb3BlcnR5KClcbiAgICBwYW5lbDogb2JqZWN0XG5cbiAgICBAc3RhdGUoKVxuICAgIHByaXZhdGUgX2l0ZW1zOiBvYmplY3RbXSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgIEBzdGF0ZSgpXG4gICAgX2VkaXRvclBhcmFtczogRWRpdG9yUGFyYW1zIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgX2NvbHVtbnMobmFycm93OiBib29sZWFuKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDoge1xuICAgICAgICAgICAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpY29uOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpY29uXCIsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IChpY29uOiBzdHJpbmcpID0+XG4gICAgICAgICAgICAgICAgICAgIGljb25cbiAgICAgICAgICAgICAgICAgICAgICAgID8gaHRtbGAgPGhhLWljb24gc2xvdD1cIml0ZW0taWNvblwiIC5pY29uPSR7aWNvbn0+PC9oYS1pY29uPiBgXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGh0bWxgYCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIk5hbWVcIixcbiAgICAgICAgICAgICAgICBzb3J0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmaWx0ZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogXCJhc2NcIixcbiAgICAgICAgICAgICAgICBncm93czogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogKHZhbHVlOiBzdHJpbmcpID0+IGh0bWxgJHt2YWx1ZX1gLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlbW92ZToge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIlJlbW92ZVwiLFxuICAgICAgICAgICAgICAgIGZpbHRlcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGdyb3dzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogKHZhbHVlOiBzdHJpbmcsIHJvdz86IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBfYWN0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlKHJvdy5pZCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgICAgICAgICAgICAgPG13Yy1idXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9JHtfYWN0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbW92ZVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9td2MtYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICBgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhc3luYyBfcmVtb3ZlKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5oYXNzLmNvbm5lY3Rpb24uc2VuZE1lc3NhZ2VQcm9taXNlKHtcbiAgICAgICAgICAgIHR5cGU6IFwic3VwZXJfZ3JvdXBzL3JlbW92ZV9lbnRyeVwiLFxuICAgICAgICAgICAgZW50cnlfaWQ6IGlkLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbG9hZCgpO1xuICAgIH1cblxuICAgIGFzeW5jIF9sb2FkKCkge1xuICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgdGhpcy5oYXNzLmNvbm5lY3Rpb24uc2VuZE1lc3NhZ2VQcm9taXNlKHtcbiAgICAgICAgICAgIHR5cGU6IFwic3VwZXJfZ3JvdXBzL2dldF9lbnRyaWVzXCJcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiQWxsIGl0ZW1zOlwiLCByZXNwKTtcbiAgICAgICAgdGhpcy5faXRlbXMgPSByZXNwLml0ZW1zO1xuICAgIH1cblxuICAgIF9nZXRJdGVtcygpOiBvYmplY3RbXSB7XG4gICAgICAgIGlmICh0aGlzLl9pdGVtcykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xvYWQoKTtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIF9lZGl0KGl0ZW06IGFueSkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIl9lZGl0OlwiLCBpdGVtLmRldGFpbC5pZCk7XG4gICAgICAgIGNvbnN0IF9pdGVtOiBhbnkgPSB0aGlzLl9pdGVtcy5maW5kKChfaXRlbTogYW55KSA9PiBfaXRlbS5pZCA9PSBpdGVtLmRldGFpbC5pZCk7XG4gICAgICAgIHRoaXMuX2VkaXRvclBhcmFtcyA9IHtcbiAgICAgICAgICAgIGlkOiBfaXRlbS5pZCxcbiAgICAgICAgICAgIHRpdGxlOiBfaXRlbS50aXRsZSxcbiAgICAgICAgICAgIGFsbE9uOiBfaXRlbS5hbGxfb24sXG4gICAgICAgICAgICBkb21haW46IF9pdGVtLmRvbWFpbixcbiAgICAgICAgICAgIGVudHJ5OiBfaXRlbS5lbnRyeSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBfYWRkKCkge1xuICAgICAgICB0aGlzLl9lZGl0b3JQYXJhbXMgPSB7XG4gICAgICAgICAgICBpZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdGl0bGU6IFwiTmV3IEdyb3VwXCIsXG4gICAgICAgICAgICBhbGxPbjogZmFsc2UsXG4gICAgICAgICAgICBkb21haW46IFwibGlnaHRcIixcbiAgICAgICAgICAgIGVudHJ5OiB7XG4gICAgICAgICAgICAgICAgZW50aXR5X2lkOiBbXSxcbiAgICAgICAgICAgICAgICBkZXZpY2VfaWQ6IFtdLFxuICAgICAgICAgICAgICAgIGFyZWFfaWQ6IFtdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhc3luYyBfc2F2ZShldmVudDogYW55KSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiT24gc2F2ZTpcIiwgZXZlbnQpO1xuICAgICAgICBjb25zdCBlbnRyeSA9IGV2ZW50LmRldGFpbDtcbiAgICAgICAgY29uc3QgZGF0YSA9IGVudHJ5LmlkPyB7XG4gICAgICAgICAgICB0eXBlOiBcInN1cGVyX2dyb3Vwcy91cGRhdGVfZW50cnlcIixcbiAgICAgICAgICAgIGVudHJ5X2lkOiBlbnRyeS5pZCxcbiAgICAgICAgICAgIGFsbF9vbjogZW50cnkuYWxsT24sXG4gICAgICAgICAgICBpdGVtczogZW50cnkuZW50cnlcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICAgIHR5cGU6IFwic3VwZXJfZ3JvdXBzL2FkZF9lbnRyeVwiLFxuICAgICAgICAgICAgdGl0bGU6IGVudHJ5LnRpdGxlLFxuICAgICAgICAgICAgZG9tYWluOiBlbnRyeS5kb21haW4sXG4gICAgICAgICAgICBhbGxfb246IGVudHJ5LmFsbE9uLFxuICAgICAgICAgICAgaXRlbXM6IGVudHJ5LmVudHJ5XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCB0aGlzLmhhc3MuY29ubmVjdGlvbi5zZW5kTWVzc2FnZVByb21pc2UoZGF0YSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiX3NhdmUgcmVzdWx0OlwiLCByZXNwKTtcbiAgICAgICAgdGhpcy5fbG9hZCgpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJQYW5lbDogXCIsIHRoaXMuaGFzcywgdGhpcy5fZWRpdG9yUGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgIDxoYXNzLXRhYnMtc3VicGFnZS1kYXRhLXRhYmxlXG4gICAgICAgICAgICAuaGFzcz0ke3RoaXMuaGFzc31cbiAgICAgICAgICAgIC5uYXJyb3c9JHt0aGlzLm5hcnJvd31cbiAgICAgICAgICAgIGJhY2stcGF0aD1cIi9jb25maWdcIlxuICAgICAgICAgICAgLnJvdXRlPSR7dGhpcy5yb3V0ZX1cbiAgICAgICAgICAgIC50YWJzPSR7dGFic31cbiAgICAgICAgICAgIC5jb2x1bW5zPSR7dGhpcy5fY29sdW1ucyh0aGlzLm5hcnJvdyl9XG4gICAgICAgICAgICAuZGF0YT0ke3RoaXMuX2dldEl0ZW1zKCl9XG4gICAgICAgICAgICBAcm93LWNsaWNrPSR7dGhpcy5fZWRpdH1cbiAgICAgICAgICAgIGlkPVwiaWRcIlxuICAgICAgICAgICAgaGFzRmFiXG4gICAgICAgICAgICBjbGlja2FibGVcbiAgICAgICAgPlxuICAgICAgICAgICAgPGhhLWZhYlxuICAgICAgICAgICAgICAgIHNsb3Q9XCJmYWJcIlxuICAgICAgICAgICAgICAgIGxhYmVsPVwiQWRkIG5ldyBncm91cFwiXG4gICAgICAgICAgICAgICAgZXh0ZW5kZWRcbiAgICAgICAgICAgICAgICBAY2xpY2s9JHt0aGlzLl9hZGR9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICA8L2hhLWZhYj5cbiAgICAgICAgPC9oYXNzLXRhYnMtc3VicGFnZS1kYXRhLXRhYmxlPlxuICAgICAgICA8c3VwZXItZ3JvdXBzLWVkaXRvciBcbiAgICAgICAgICAgIC5kYXRhPSR7dGhpcy5fZWRpdG9yUGFyYW1zfVxuICAgICAgICAgICAgLmhhc3M9JHt0aGlzLmhhc3N9XG4gICAgICAgICAgICBAc2F2ZT0ke3RoaXMuX3NhdmV9XG4gICAgICAgID5cbiAgICAgICAgPC9zdXBlci1ncm91cHMtZWRpdG9yPlxuICAgICAgICBgO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJTaGFkb3dSb290IiwiU2hhZHlDU1MiLCJuYXRpdmVTaGFkb3ciLCJEb2N1bWVudCIsInByb3RvdHlwZSIsIkNTU1N0eWxlU2hlZXQiLCJlIiwiU3ltYm9sIiwibiIsIk1hcCIsInMiLCJjb25zdHJ1Y3RvciIsInQiLCJ0aGlzIiwiXyRjc3NSZXN1bHQkIiwiRXJyb3IiLCJjc3NUZXh0Iiwic3R5bGVTaGVldCIsImdldCIsInNldCIsInJlcGxhY2VTeW5jIiwidG9TdHJpbmciLCJvIiwiciIsImxlbmd0aCIsInJlZHVjZSIsIlMiLCJjc3NSdWxlcyIsInRydXN0ZWRUeXBlcyIsImVtcHR5U2NyaXB0IiwiaCIsInJlYWN0aXZlRWxlbWVudFBvbHlmaWxsU3VwcG9ydCIsInRvQXR0cmlidXRlIiwiaSIsIkJvb2xlYW4iLCJPYmplY3QiLCJBcnJheSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmcm9tQXR0cmlidXRlIiwiTnVtYmVyIiwicGFyc2UiLCJsIiwiYXR0cmlidXRlIiwidHlwZSIsIlN0cmluZyIsImNvbnZlcnRlciIsInJlZmxlY3QiLCJoYXNDaGFuZ2VkIiwiYSIsIkhUTUxFbGVtZW50Iiwic3VwZXIiLCJfJEV0IiwiaXNVcGRhdGVQZW5kaW5nIiwiaGFzVXBkYXRlZCIsIl8kRWkiLCJzdGF0aWMiLCJwdXNoIiwib2JzZXJ2ZWRBdHRyaWJ1dGVzIiwiZmluYWxpemUiLCJlbGVtZW50UHJvcGVydGllcyIsImZvckVhY2giLCJfJEVoIiwiXyRFdSIsInN0YXRlIiwibm9BY2Nlc3NvciIsImhhc093blByb3BlcnR5IiwiZ2V0UHJvcGVydHlEZXNjcmlwdG9yIiwiZGVmaW5lUHJvcGVydHkiLCJyZXF1ZXN0VXBkYXRlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImZpbmFsaXplZCIsImdldFByb3RvdHlwZU9mIiwicHJvcGVydGllcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjcmVhdGVQcm9wZXJ0eSIsImVsZW1lbnRTdHlsZXMiLCJmaW5hbGl6ZVN0eWxlcyIsInN0eWxlcyIsImlzQXJyYXkiLCJTZXQiLCJmbGF0IiwicmV2ZXJzZSIsInVuc2hpZnQiLCJ0b0xvd2VyQ2FzZSIsIl8kRXAiLCJQcm9taXNlIiwiZW5hYmxlVXBkYXRpbmciLCJfJEFMIiwiXyRFbSIsImFkZENvbnRyb2xsZXIiLCJfJEVnIiwicmVuZGVyUm9vdCIsImlzQ29ubmVjdGVkIiwiaG9zdENvbm5lY3RlZCIsImNhbGwiLCJyZW1vdmVDb250cm9sbGVyIiwic3BsaWNlIiwiaW5kZXhPZiIsImNyZWF0ZVJlbmRlclJvb3QiLCJzaGFkb3dSb290IiwiYXR0YWNoU2hhZG93Iiwic2hhZG93Um9vdE9wdGlvbnMiLCJhZG9wdGVkU3R5bGVTaGVldHMiLCJtYXAiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJsaXROb25jZSIsInNldEF0dHJpYnV0ZSIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJjb25uZWN0ZWRDYWxsYmFjayIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiaG9zdERpc2Nvbm5lY3RlZCIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsIl8kQUsiLCJfJEVTIiwicmVtb3ZlQXR0cmlidXRlIiwiZ2V0UHJvcGVydHlPcHRpb25zIiwiaGFzIiwiXyRFXyIsIl8kRUMiLCJhc3luYyIsInJlamVjdCIsInNjaGVkdWxlVXBkYXRlIiwicGVyZm9ybVVwZGF0ZSIsInNob3VsZFVwZGF0ZSIsIndpbGxVcGRhdGUiLCJob3N0VXBkYXRlIiwidXBkYXRlIiwiXyRFVSIsIl8kQUUiLCJob3N0VXBkYXRlZCIsImZpcnN0VXBkYXRlZCIsInVwZGF0ZWQiLCJ1cGRhdGVDb21wbGV0ZSIsImdldFVwZGF0ZUNvbXBsZXRlIiwibW9kZSIsIlJlYWN0aXZlRWxlbWVudCIsImdsb2JhbFRoaXMiLCJyZWFjdGl2ZUVsZW1lbnRWZXJzaW9ucyIsImNyZWF0ZVBvbGljeSIsImNyZWF0ZUhUTUwiLCJNYXRoIiwicmFuZG9tIiwic2xpY2UiLCJjcmVhdGVDb21tZW50IiwiZCIsImMiLCJ2IiwiZiIsIl8iLCJtIiwiZyIsInAiLCJfJGxpdFR5cGUkIiwic3RyaW5ncyIsInZhbHVlcyIsIiQiLCJiIiwiZm9yIiwidyIsIlQiLCJXZWFrTWFwIiwiQSIsImNyZWF0ZVRyZWVXYWxrZXIiLCJDIiwidSIsImxhc3RJbmRleCIsImV4ZWMiLCJ0ZXN0IiwiUmVnRXhwIiwieSIsInN0YXJ0c1dpdGgiLCJFIiwicGFydHMiLCJlbCIsImN1cnJlbnROb2RlIiwiY29udGVudCIsImZpcnN0Q2hpbGQiLCJyZW1vdmUiLCJhcHBlbmQiLCJjaGlsZE5vZGVzIiwibmV4dE5vZGUiLCJub2RlVHlwZSIsImhhc0F0dHJpYnV0ZXMiLCJnZXRBdHRyaWJ1dGVOYW1lcyIsImVuZHNXaXRoIiwiZ2V0QXR0cmlidXRlIiwic3BsaXQiLCJpbmRleCIsIm5hbWUiLCJjdG9yIiwiTSIsIkgiLCJJIiwidGFnTmFtZSIsImRhdGEiLCJpbm5lckhUTUwiLCJQIiwiXyRDbCIsIl8kQ3UiLCJfJGxpdERpcmVjdGl2ZSQiLCJfJEFPIiwiXyRBVCIsIl8kQVMiLCJWIiwiXyRBTiIsIl8kQUQiLCJfJEFNIiwicGFyZW50Tm9kZSIsIl8kQVUiLCJjcmVhdGlvblNjb3BlIiwiaW1wb3J0Tm9kZSIsIk4iLCJuZXh0U2libGluZyIsIkwiLCJfJEFJIiwiXyRBSCIsIl8kQUEiLCJfJEFCIiwib3B0aW9ucyIsIl8kQ2ciLCJzdGFydE5vZGUiLCJlbmROb2RlIiwiXyRBUiIsIml0ZXJhdG9yIiwiaW5zZXJ0QmVmb3JlIiwiY3JlYXRlVGV4dE5vZGUiLCJfJEFDIiwiXyRBUCIsInNldENvbm5lY3RlZCIsImVsZW1lbnQiLCJmaWxsIiwiayIsImFyZ3VtZW50cyIsImNhcHR1cmUiLCJvbmNlIiwicGFzc2l2ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlRXZlbnQiLCJob3N0IiwieiIsImxpdEh0bWxQb2x5ZmlsbFN1cHBvcnQiLCJsaXRIdG1sVmVyc2lvbnMiLCJyZW5kZXJPcHRpb25zIiwiXyREdCIsInJlbmRlckJlZm9yZSIsInJlbmRlciIsIl8kbGl0UGFydCQiLCJfJGxpdEVsZW1lbnQkIiwibGl0RWxlbWVudEh5ZHJhdGVTdXBwb3J0IiwiTGl0RWxlbWVudCIsImxpdEVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQiLCJsaXRFbGVtZW50VmVyc2lvbnMiLCJraW5kIiwiZGVzY3JpcHRvciIsImZpbmlzaGVyIiwia2V5IiwicGxhY2VtZW50Iiwib3JpZ2luYWxLZXkiLCJpbml0aWFsaXplciIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIiwiZWxlbWVudHMiLCJTdXBlckdyb3Vwc0VkaXRvciIsInVuZGVmaW5lZCIsIl9kYXRhIiwiX3RhcmdldFNlbGVjdG9yIiwidGFyZ2V0IiwiX2RvbWFpbk1hcCIsIl9kb21haW5TZWxlY3RvciIsInNlbGVjdCIsIl9hbGxPblNlbGVjdG9yIiwiYm9vbGVhbiIsInByb3BzIiwiX2NhbmNlbCIsIl9jbG9zZSIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImJ1YmJsZXMiLCJfdGl0bGVDaGFuZ2VkIiwiZXZlbnQiLCJ0aXRsZSIsInZhbHVlIiwiX2FsbE9uQ2hhbmdlZCIsImFsbE9uIiwiX29uRG9tYWluQ2hhbmdlZCIsImVudHJpZXMiLCJkb21haW4iLCJfb25FbnRyeUNoYW5nZWQiLCJlbnRyeSIsIl90aXRsZUludmFsaWQiLCJ0cmltIiwidGl0bGVSb3ciLCJkaWFsb2dUaXRsZSIsImRvbWFpblNlbGVjdG9yIiwiaWQiLCJoYXNzIiwidGFicyIsInBhdGgiLCJpY29uIiwiU3VwZXJHcm91cHNQYW5lbCIsIl9pdGVtcyIsIl9lZGl0b3JQYXJhbXMiLCJfY29sdW1ucyIsIm5hcnJvdyIsImhpZGRlbiIsInRlbXBsYXRlIiwic29ydGFibGUiLCJmaWx0ZXJhYmxlIiwiZGlyZWN0aW9uIiwiZ3Jvd3MiLCJyb3ciLCJfcmVtb3ZlIiwiY29ubmVjdGlvbiIsInNlbmRNZXNzYWdlUHJvbWlzZSIsImVudHJ5X2lkIiwiX2xvYWQiLCJyZXNwIiwiaXRlbXMiLCJfZ2V0SXRlbXMiLCJfZWRpdCIsIml0ZW0iLCJfaXRlbSIsImZpbmQiLCJhbGxfb24iLCJfYWRkIiwiZW50aXR5X2lkIiwiZGV2aWNlX2lkIiwiYXJlYV9pZCIsIl9zYXZlIiwicm91dGUiXSwic291cmNlUm9vdCI6IiJ9